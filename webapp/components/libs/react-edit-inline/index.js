"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const ReactDOM = require("react-dom");
const PropTypes = require("prop-types");
function selectInputText(element) {
    element.setSelectionRange(0, element.value.length);
}
class InlineEdit extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            editing: this.props.editing,
            text: this.props.text,
            minLength: this.props.minLength,
            maxLength: this.props.maxLength,
        };
        this.startEditing = (e) => {
            if (this.props.stopPropagation) {
                e.stopPropagation();
            }
            this.setState({ editing: true, text: this.props.text });
        };
        this.finishEditing = () => {
            if (this.isInputValid(this.state.text) && this.props.text != this.state.text) {
                this.commitEditing();
            }
            else if (this.props.text === this.state.text || !this.isInputValid(this.state.text)) {
                this.cancelEditing();
            }
        };
        this.cancelEditing = () => {
            this.setState({ editing: false, text: this.props.text });
        };
        this.commitEditing = () => {
            this.setState({ editing: false, text: this.state.text });
            let newProp = {};
            newProp[this.props.paramName] = this.state.text;
            this.props.change(newProp);
        };
        this.clickWhenEditing = (e) => {
            if (this.props.stopPropagation) {
                e.stopPropagation();
            }
        };
        this.isInputValid = (text) => {
            return (text.length >= this.state.minLength && text.length <= this.state.maxLength);
        };
        this.keyDown = (event) => {
            if (event.keyCode === 13) {
                this.finishEditing();
            }
            else if (event.keyCode === 27) {
                this.cancelEditing();
            }
        };
        this.textChanged = (event) => {
            this.setState({
                text: event.target.value.trim()
            });
        };
    }
    componentWillMount() {
        this.isInputValid = this.props.validate || this.isInputValid;
        // Warn about deprecated elements
        if (this.props.element) {
            console.warn('`element` prop is deprecated: instead pass editingElement or staticElement to InlineEdit component');
        }
    }
    componentWillReceiveProps(nextProps) {
        const isTextChanged = (nextProps.text !== this.props.text);
        const isEditingChanged = (nextProps.editing !== this.props.editing);
        let nextState = {};
        if (isTextChanged) {
            nextState.text = nextProps.text;
        }
        if (isEditingChanged) {
            nextState.editing = nextProps.editing;
        }
        if (isTextChanged || isEditingChanged) {
            this.setState(nextState);
        }
    }
    componentDidUpdate(prevProps, prevState) {
        let inputElem = ReactDOM.findDOMNode(this.refs.input);
        if (this.state.editing && !prevState.editing) {
            inputElem.focus();
            selectInputText(inputElem);
        }
        else if (this.state.editing && prevProps.text != this.props.text) {
            this.finishEditing();
        }
    }
    render() {
        if (this.props.isDisabled) {
            const Element = this.props.element || this.props.staticElement;
            return React.createElement(Element, { className: this.props.className, style: this.props.style }, this.state.text || this.props.placeholder);
        }
        else if (!this.state.editing) {
            const Element = this.props.element || this.props.staticElement;
            return React.createElement(Element, { className: this.props.className, onClick: this.startEditing, tabIndex: this.props.tabIndex, style: this.props.style }, this.state.text || this.props.placeholder);
        }
        else {
            const Element = this.props.element || this.props.editingElement;
            return React.createElement(Element, { onClick: this.clickWhenEditing, onKeyDown: this.keyDown, onBlur: this.finishEditing, className: this.props.activeClassName, placeholder: this.props.placeholder, defaultValue: this.state.text, onChange: this.textChanged, style: this.props.style, ref: "input" });
        }
    }
}
InlineEdit.propTypes = {
    text: PropTypes.string.isRequired,
    paramName: PropTypes.string.isRequired,
    change: PropTypes.func.isRequired,
    placeholder: PropTypes.string,
    className: PropTypes.string,
    activeClassName: PropTypes.string,
    minLength: PropTypes.number,
    maxLength: PropTypes.number,
    validate: PropTypes.func,
    style: PropTypes.object,
    editingElement: PropTypes.string,
    staticElement: PropTypes.string,
    tabIndex: PropTypes.number,
    isDisabled: PropTypes.bool,
    editing: PropTypes.bool
};
InlineEdit.defaultProps = {
    minLength: 1,
    maxLength: 256,
    editingElement: 'input',
    staticElement: 'span',
    tabIndex: 0,
    isDisabled: false,
    editing: false
};
exports.default = InlineEdit;
//# sourceMappingURL=data:application/json;base64,