"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse");
// Parse.initialize("ABCDEFG12345");
// Parse.serverURL = "http://psign.iriosystems.com:1380/parse";
exports.PORT = parseInt(process.env.PORT, 10) || 80;
exports.IP = "localhost";
var SERVER_URL = `https://${exports.IP}:${exports.PORT}/parse`;
if (typeof window != "undefined") {
    SERVER_URL = window.location.origin + "/parse";
    // alert(SERVER_URL);
}
console.log("SERVER_URL", SERVER_URL);
Parse.initialize("psignApp");
Parse.serverURL = SERVER_URL;
const moment = require("moment");
function Query(className) {
    return new Parse.Query(className);
}
Parse.LiveQuery.on("open", () => {
    console.log("socket connection established");
});
// When we establish the WebSocket connection to the LiveQuery server, you’ll get this event.
// CLOSE EVENT
Parse.LiveQuery.on("close", () => {
    console.log("socket connection closed");
});
// When we lose the WebSocket connection to the LiveQuery server, you’ll get this event.
// ERROR EVENT
Parse.LiveQuery.on("error", error => {
    console.log("Error", error);
});
// Parse.liveQueryServerURL = `ws://${SERVER_URL}:8000`;
class Database {
    static Subscribe(className) {
        let query = new Parse.Query(className);
        // query.equalTo("playerName", "John Doe");
        let subscription = query.subscribe();
        return subscription;
    }
    static addMedia(file) {
        return __awaiter(this, void 0, void 0, function* () {
            var sfname = file.name.replace(/[^a-z0-9]/gi, "_").toLowerCase();
            var parseFile = new Parse.File(sfname, file);
            yield parseFile.save();
            var medium = new Parse.Object("Media");
            medium.set("file", parseFile);
            yield medium.save(null);
            return medium;
        });
    }
    static saveGroup(objectId, currentGroupName) {
        return __awaiter(this, void 0, void 0, function* () {
            var group = null;
            if (objectId) {
                group = yield new Parse.Query("Groups").get(objectId);
            }
            else {
                group = new Parse.Object("Groups");
            }
            group.set("name", currentGroupName);
            yield group.save(null);
        });
    }
    static deleteMedia(id) {
        return __awaiter(this, void 0, void 0, function* () {
            var medium = yield new Parse.Query("Media").get(id);
            yield medium.destroy(null);
            return medium;
        });
    }
    static login(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            var user = yield Parse.User.logIn(username, password);
            return user;
        });
    }
    static getSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            var query = new Parse.Query("Settings");
            return yield query.first(null).then(k => k.toJSON());
        });
    }
    static getGroups() {
        return __awaiter(this, void 0, void 0, function* () {
            var query = new Parse.Query("Groups");
            return yield query.find(null); //.then(k => k.toJSON());
        });
    }
    static getSettingsParse() {
        return __awaiter(this, void 0, void 0, function* () {
            var query = new Parse.Query("Settings");
            return yield query.first(null);
        });
    }
    static loadSlot(date, selectedGroup = null) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var query = new Parse.Query("TimeSlots")
                    .include("video")
                    .equalTo("timestamp", date);
                if (selectedGroup) {
                    query.equalTo("group", selectedGroup);
                }
                return yield query.first(null).then(k => k && k.toJSON());
            }
            catch (e) {
                alert("error:" + e.message);
                return null;
            }
        });
    }
    static loadSlotOrNew(date) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var query = new Parse.Query("TimeSlots").equalTo("timestamp", date);
                return (yield query.first(null)) || new Parse.Object("TimeSlots");
            }
            catch (e) {
                return new Parse.Object("TimeSlots");
            }
        });
    }
    static setVehicle(id, name) {
        return __awaiter(this, void 0, void 0, function* () {
            var device = yield Query("Devices").get(id);
            device.set("vehicle_no", name);
            yield device.save(null);
        });
    }
    static setVehicleGroup(id, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
            var device = yield Query("Devices").get(id);
            var group = new Parse.Object("Groups");
            group.id = groupId;
            device.set("group", group);
            yield device.save(null);
        });
    }
    static setSnaphots(id, status) {
        return __awaiter(this, void 0, void 0, function* () {
            var device = yield Query("Devices").get(id);
            device.set("ve", status);
            yield device.save(null);
        });
    }
    static saveSlot(media, timeSlot, title, scrolling_text, selectedGroup = null) {
        return __awaiter(this, void 0, void 0, function* () {
            var durations = media.video_duration / 30;
            if (durations < 1)
                durations = 1;
            var dCount = 0;
            console.error("has multiple durations", { durations });
            var medium = new Parse.Object("Media");
            medium.id = media.objectId;
            for (let dCount = 0; dCount < durations; dCount++) {
                console.log("saving duration: ", dCount * 30);
                var myTimeSlot = moment(timeSlot)
                    .add(dCount * 30, "seconds")
                    .toDate();
                var slot = yield this.loadSlotOrNew(myTimeSlot);
                slot.set("title", title);
                if (selectedGroup) {
                    var group = new Parse.Object("Groups");
                    group.id = selectedGroup;
                    slot.set("group", group);
                }
                slot.set("scrolling_text", scrolling_text);
                slot.set("video", medium);
                slot.set("timestamp", myTimeSlot);
                slot.set("duration", 30);
                yield slot.save(null);
            }
            this.forceReload();
        });
    }
    static forceReload() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var setting = yield this.getSettingsParse();
                setting.set("lastUpdate", new Date()); // Force all players to update their playlists
                yield setting.save(null);
            }
            catch (err) {
                console.log("err", err);
            }
        });
    }
    static saveSettings(defaultVideo, defaultBanner, defaultRSS) {
        return __awaiter(this, void 0, void 0, function* () {
            var query = new Parse.Query("Settings");
            var setting = yield query.first(null);
            setting.set("defaultVideo", defaultVideo);
            setting.set("defaultBanner", defaultBanner);
            setting.set("defaultRSS", defaultRSS);
            return yield setting.save(null);
        });
    }
    static isLoggedIn() {
        return Parse.User.current();
    }
    static changeMediaTitle(oitem, title) {
        return __awaiter(this, void 0, void 0, function* () {
            var item = yield Query("Media").get(oitem.objectId);
            item.set("title", title);
            yield item.save();
        });
    }
    static getGalleryItems() {
        return __awaiter(this, void 0, void 0, function* () {
            // console.log("Database getGalleryItems",Parse.serverURL)
            var items = yield Query("Media").find();
            return items.map(d => d.toJSON());
        });
    }
    static fetchDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            var devices = yield Query("Devices").find();
            return devices.map(d => d.toJSON());
        });
    }
    static fetchGroups() {
        return __awaiter(this, void 0, void 0, function* () {
            var groups = yield Query("Groups").find();
            return groups.map(d => d.toJSON());
        });
    }
    static getRouteToday(objectId) {
        return __awaiter(this, void 0, void 0, function* () {
            var start = moment()
                .utc()
                .startOf("day")
                .toDate(); // set to 12:00 am today
            var end = moment()
                .utc()
                .endOf("day")
                .toDate(); // set to 23:59 pm today
            var device = new Parse.Object("Devices");
            device.id = objectId;
            var snapshots = yield Query("Snapshots")
                .greaterThanOrEqualTo("createdAt", start)
                .lessThanOrEqualTo("createdAt", end)
                .exists("location")
                .equalTo("device", device)
                .ascending("createdAt")
                .find();
            return snapshots.map(d => d.toJSON());
        });
    }
}
exports.Database = Database;
//# sourceMappingURL=data:application/json;base64,