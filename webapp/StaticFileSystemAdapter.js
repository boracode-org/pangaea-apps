"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var pathSep = require("path").sep;
function StaticFileSystemAdapter(options) {
    options = options || {};
    let filesSubDirectory = options.filesSubDirectory || "";
    this._filesDir = filesSubDirectory;
    this._mkdir(this._getApplicationDir());
    if (!this._applicationDirExist()) {
        throw "Files directory doesn't exist.";
    }
    return this;
}
exports.default = StaticFileSystemAdapter;
StaticFileSystemAdapter.prototype.createFile = function (filename, data) {
    return new Promise((resolve, reject) => {
        let filepath = this._getLocalFilePath(filename);
        fs.writeFile(filepath, data, err => {
            if (err !== null) {
                return reject(err);
            }
            resolve(data);
        });
    });
};
StaticFileSystemAdapter.prototype.deleteFile = function (filename) {
    return new Promise((resolve, reject) => {
        let filepath = this._getLocalFilePath(filename);
        fs.readFile(filepath, function (err, data) {
            if (err !== null) {
                return reject(err);
            }
            fs.unlink(filepath, unlinkErr => {
                if (err !== null) {
                    return reject(unlinkErr);
                }
                resolve(data);
            });
        });
    });
};
StaticFileSystemAdapter.prototype.getFileData = function (filename) {
    return new Promise((resolve, reject) => {
        let filepath = this._getLocalFilePath(filename);
        fs.readFile(filepath, function (err, data) {
            if (err !== null) {
                return reject(err);
            }
            resolve(data);
        });
    });
};
StaticFileSystemAdapter.prototype.getFileLocation = function (config, filename) {
    return (config.mount +
        "/files/" +
        config.applicationId +
        "/" +
        encodeURIComponent(filename));
};
/*
  Helpers
 --------------- */
StaticFileSystemAdapter.prototype._getApplicationDir = function () {
    if (this._filesDir) {
        return this._filesDir; //path.join("files", this._filesDir);
    }
    else {
        return "files";
    }
};
StaticFileSystemAdapter.prototype._applicationDirExist = function () {
    return fs.existsSync(this._getApplicationDir());
};
StaticFileSystemAdapter.prototype._getLocalFilePath = function (filename) {
    let applicationDir = this._getApplicationDir();
    if (!fs.existsSync(applicationDir)) {
        this._mkdir(applicationDir);
    }
    return path.join(applicationDir, encodeURIComponent(filename));
};
StaticFileSystemAdapter.prototype._mkdir = function (dirPath) {
    // snippet found on -> https://gist.github.com/danherbert-epam/3960169
    let dirs = dirPath.split(pathSep);
    var root = "";
    while (dirs.length > 0) {
        var dir = dirs.shift();
        if (dir === "") {
            // If directory starts with a /, the first path will be an empty string.
            root = pathSep;
        }
        if (!fs.existsSync(path.join(root, dir))) {
            try {
                fs.mkdirSync(path.join(root, dir));
            }
            catch (e) {
                if (e.code == "EACCES") {
                    throw new Error("PERMISSION ERROR: In order to use the FileSystemAdapter, write access to the server's file system is required.");
                }
            }
        }
        root = path.join(root, dir, pathSep);
    }
};
// module.exports = FileSystemAdapter;
// module.exports.default = FileSystemAdapter;
//# sourceMappingURL=data:application/json;base64,