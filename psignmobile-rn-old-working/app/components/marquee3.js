"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_1 = require("react-native");
const prop_types_1 = require("prop-types");
const _ = require("lodash");
function until(test, iterator, callback) {
    if (!test()) {
        iterator(err => {
            if (err) {
                return callback(err);
            }
            until(test, iterator, callback);
        });
    }
    else {
        callback();
    }
}
class Marquee extends React.Component {
    constructor() {
        super(...arguments);
        this.propTypes = {
            children: prop_types_1.default.string.isRequired,
            speed: prop_types_1.default.number,
            spaceRatio: prop_types_1.default.number
        };
        this.defaultProps = { speed: 30, spaceRatio: 0.5 };
        this.alpha = {};
        this.state = {
            left1: new react_native_1.Animated.Value(0),
            left2: new react_native_1.Animated.Value(0),
            list: this.props.children.split("")
        };
    }
    componentWillReceiveProps(nextProps) {
        if (this.props.children != nextProps.children) {
            this.animateEnable = false;
            //this.width = 0;
            this.state.left1.stopAnimation(() => {
                this.state.left2.stopAnimation(() => {
                    react_native_1.Animated.timing(this.state.left1, {
                        toValue: 0,
                        duration: 0
                    }).start(() => {
                        react_native_1.Animated.timing(this.state.left2, {
                            toValue: this.width,
                            duration: 0
                        }).start(() => {
                            this.setState({ list: nextProps.children.split("") });
                            if (!this.animateEnable) {
                                this.animateEnable = true;
                                until(() => this.width > 0, cb => setTimeout(cb, 100), () => this.startMoveFirstLabelHead());
                            }
                        });
                    });
                });
            });
        }
    }
    onLayout(i, e) {
        this.alpha[i] = e.nativeEvent.layout.width;
        if (_.size(this.alpha) === this.state.list.length) {
            this.twidth = _.sum(_.values(this.alpha));
            this.alpha = {};
            if (!this.animateEnable) {
                this.animateEnable = true;
                until(() => this.width > 0, cb => setTimeout(cb, 100), () => this.startMoveFirstLabelHead());
            }
        }
    }
    onLayoutContainer(e) {
        if (!this.width) {
            this.width = e.nativeEvent.layout.width;
            this.spaceWidth = this.props.spaceRatio * this.width;
            this.setState({ left1: new react_native_1.Animated.Value(0) });
            this.setState({ left2: new react_native_1.Animated.Value(this.width) });
        }
    }
    startMoveFirstLabelHead() {
        const { width, twidth, props } = this;
        const { speed } = props;
        return react_native_1.Animated.timing(this.state.left1, {
            toValue: -twidth + this.spaceWidth,
            duration: (twidth - this.spaceWidth) * speed,
            easing: react_native_1.Easing.linear,
            delay: 500
        }).start(() => {
            this.animateEnable &&
                react_native_1.Animated.parallel([
                    this.moveFirstLabelTail(),
                    this.moveSecondLabelHead()
                ]);
        });
    }
    moveFirstLabelHead() {
        const { width, twidth, props } = this;
        const { speed } = props;
        react_native_1.Animated.timing(this.state.left1, {
            toValue: -twidth + this.spaceWidth,
            duration: (twidth + this.spaceWidth) * speed,
            easing: react_native_1.Easing.linear
        }).start(() => {
            this.animateEnable &&
                react_native_1.Animated.parallel([
                    this.moveFirstLabelTail(),
                    this.moveSecondLabelHead()
                ]);
        });
    }
    moveFirstLabelTail() {
        const { width, twidth, props } = this;
        const { speed } = props;
        return react_native_1.Animated.timing(this.state.left1, {
            toValue: -twidth,
            duration: this.spaceWidth * speed,
            easing: react_native_1.Easing.linear
        }).start(() => {
            this.animateEnable &&
                this.setState({
                    left1: new react_native_1.Animated.Value(width)
                });
        });
    }
    moveSecondLabelHead() {
        const { width, twidth, props } = this;
        const { speed } = props;
        return react_native_1.Animated.timing(this.state.left2, {
            toValue: -twidth + this.spaceWidth,
            duration: (twidth + this.spaceWidth) * speed,
            easing: react_native_1.Easing.linear
        }).start(() => {
            this.animateEnable &&
                react_native_1.Animated.parallel([
                    this.moveFirstLabelHead(),
                    this.moveSecondLabelTail()
                ]);
        });
    }
    moveSecondLabelTail() {
        const { width, twidth, props } = this;
        const { speed } = props;
        return react_native_1.Animated.timing(this.state.left2, {
            toValue: -twidth,
            duration: this.spaceWidth * speed,
            easing: react_native_1.Easing.linear
        }).start(() => {
            this.animateEnable &&
                this.setState({
                    left2: new react_native_1.Animated.Value(twidth)
                });
        });
    }
    render() {
        const { left1, left2, list } = this.state;
        const s = react_native_1.StyleSheet.flatten(this.props.style);
        const textStyleKeys = [
            "color",
            "fontSize",
            "fontWeight",
            "letterSpacing",
            "fontStyle",
            "lineHeight",
            "fontFamily",
            "textDecorationLine"
        ];
        const textStyle = _.pick(s, textStyleKeys);
        const containerStyle = _.omit(s, textStyleKeys);
        return (<react_native_1.View style={[containerStyle, { flexDirection: "row" }]} onLayout={this.onLayoutContainer}>
        <react_native_1.Animated.View style={{ flexDirection: "row", left: left1 }}>
          {list.map((o, i) => (<react_native_1.Text key={i} onLayout={this.onLayout.bind(null, i)} style={textStyle}>
              {o}
            </react_native_1.Text>))}
        </react_native_1.Animated.View>
        <react_native_1.Animated.View style={{ flexDirection: "row", position: "absolute", left: left2 }}>
          {list.map((o, i) => (<react_native_1.Text key={i} style={textStyle}>
              {o}
            </react_native_1.Text>))}
        </react_native_1.Animated.View>
      </react_native_1.View>);
    }
}
exports.default = Marquee;
//# sourceMappingURL=data:application/json;base64,