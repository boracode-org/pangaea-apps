"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/**
 * @flow
 */
const react_1 = require("react");
const react_native_1 = require("react-native");
// import  { StyleObj } from '../../node_modules/react-native/Libraries/StyleSheet/StyleSheetTypes';
const { UIManager } = react_native_1.NativeModules;
class MarqueeText extends react_1.PureComponent {
    constructor(props) {
        super(props);
        this.animatedValue = new react_native_1.Animated.Value(0);
        this.contentFits = false;
        this.distance = null;
        this.textRef = null;
        this.containerRef = null;
        this.state = {
            animating: false
        };
        this.invalidateMetrics();
    }
    componentDidMount() {
        const { marqueeDelay } = this.props;
        if (this.props.marqueeOnStart) {
            this.startAnimation(marqueeDelay);
        }
    }
    componentWillReceiveProps(nextProps) {
        if (this.props.children !== nextProps.children) {
            this.invalidateMetrics();
            this.resetAnimation();
        }
    }
    componentWillUnmount() {
        if (this.state.animating) {
            this.stopAnimation();
        }
        this.clearTimeout();
    }
    startAnimation(timeDelay) {
        if (this.state.animating) {
            return;
        }
        this.start(timeDelay);
    }
    stopAnimation() {
        this.stop();
    }
    /**
     * Resets the marquee and restarts it after `marqueeDelay` millisecons.
     */
    resetAnimation() {
        const marqueeResetDelay = Math.max(100, this.props.marqueeResetDelay);
        this.animatedValue.setValue(0);
        this.setState({ animating: false }, () => {
            this.startAnimation(marqueeResetDelay);
        });
    }
    start(timeDelay) {
        const { duration, loop, onMarqueeComplete, useNativeDriver } = this.props;
        const callback = () => {
            this.setState({ animating: true });
            this.setTimeout(() => {
                this.calculateMetrics();
                if (!this.contentFits) {
                    react_native_1.Animated.timing(this.animatedValue, {
                        toValue: -this.distance,
                        duration: duration,
                        useNativeDriver
                    }).start(({ finished }) => {
                        if (finished) {
                            if (loop) {
                                this.resetAnimation();
                            }
                            else {
                                this.stop();
                                onMarqueeComplete();
                            }
                        }
                    });
                }
            }, 100);
        };
        this.setTimeout(callback, timeDelay);
    }
    stop() {
        this.animatedValue.setValue(0);
        this.setState({ animating: false });
    }
    shouldAnimate(distance) {
        return distance > 0;
    }
    calculateMetrics() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const measureWidth = node => new Promise(resolve => {
                    UIManager.measure(react_native_1.findNodeHandle(node), (x, y, w) => {
                        // console.log('Width: ' + w);
                        return resolve(w);
                    });
                });
                const [containerWidth, textWidth] = (yield Promise.all([
                    measureWidth(this.containerRef),
                    measureWidth(this.textRef)
                ]));
                this.distance = textWidth - containerWidth;
                this.contentFits = !this.shouldAnimate(this.distance);
                return [];
                // console.log(`distance: ${this.distance}, contentFits: ${this.contentFits}`);
            }
            catch (error) {
                console.warn(error);
            }
        });
    }
    invalidateMetrics() {
        // Null distance is the special value to allow recalculation
        this.distance = null;
        // Assume the marquee does not fit until calculations show otherwise
        this.contentFits = false;
    }
    /**
     * Clears the timer
     */
    clearTimeout() {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
            // console.log("Currently running timeout is cleared!!!");
        }
    }
    /**
     * Starts a new timer
     */
    setTimeout(fn, time = 0) {
        this.clearTimeout();
        this.timer = setTimeout(fn, time);
    }
    render() {
        const _a = this.props, { children, style } = _a, rest = tslib_1.__rest(_a, ["children", "style"]);
        const { animating } = this.state;
        const { width, height } = react_native_1.StyleSheet.flatten(style);
        return (<react_native_1.View style={[styles.container, { width, height }]}>
        <react_native_1.Text numberOfLines={1} {...rest} style={[style, { opacity: animating ? 0 : 1 }]}>
          {children}
        </react_native_1.Text>
        <react_native_1.ScrollView ref={c => (this.containerRef = c)} style={react_native_1.StyleSheet.absoluteFillObject} display={animating ? "flex" : "none"} showsHorizontalScrollIndicator={false} horizontal scrollEnabled={false} onContentSizeChange={() => this.calculateMetrics()}>
          <react_native_1.Animated.Text ref={c => (this.textRef = c)} numberOfLines={1} {...rest} style={[
            style,
            { transform: [{ translateX: this.animatedValue }], width: null }
        ]}>
            {children}
          </react_native_1.Animated.Text>
        </react_native_1.ScrollView>
      </react_native_1.View>);
    }
}
MarqueeText.defaultProps = {
    style: {},
    duration: 3000,
    loop: false,
    marqueeOnStart: false,
    marqueeDelay: 0,
    marqueeResetDelay: 0,
    onMarqueeComplete: () => { },
    useNativeDriver: true
};
exports.default = MarqueeText;
const styles = react_native_1.StyleSheet.create({
    container: {
        overflow: "hidden"
    }
});
//# sourceMappingURL=data:application/json;base64,